(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{362:function(e,r,t){"use strict";t.r(r);var a=t(25),v=Object(a.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"配置式的provider"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#配置式的provider"}},[e._v("#")]),e._v(" 配置式的Provider")]),e._v(" "),r("p",[e._v("已投降，vant项目感觉没啥可挖掘")]),e._v(" "),r("p",[e._v("已投降，vant项目感觉没啥可挖掘")]),e._v(" "),r("p",[e._v("已投降，vant项目感觉没啥可挖掘")]),e._v(" "),r("h2",{attrs:{id:"elementplus的configprovider"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#elementplus的configprovider"}},[e._v("#")]),e._v(" ElementPlus的ConfigProvider")]),e._v(" "),r("p",[e._v("message: 最多三个消息提示")]),e._v(" "),r("h2",{attrs:{id:"前沿"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前沿"}},[e._v("#")]),e._v(" 前沿")]),e._v(" "),r("ul",[r("li",[e._v("借助naive ui provider，实现了message,dialog,loadingBar等通用组件以hooks的方式植入子层级的context")]),e._v(" "),r("li",[e._v("ConfigProvider抽离成组件，要注意要添加slot")]),e._v(" "),r("li",[e._v("Naive UI 的n-loading-bar-provider本质上是 通过Vue 的provide/inject 机制提供全局方法。\n但它的设计更专注于封装状态管理和生命周期控制，而不仅仅是简单地暴露一个方法。")])]),e._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),r("ul",[r("li",[e._v("navie ui 的 provide")]),e._v(" "),r("li",[e._v("elementUIPlus 的 provide")])])])}),[],!1,null,null,null);r.default=v.exports}}]);