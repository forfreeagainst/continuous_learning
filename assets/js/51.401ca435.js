(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{372:function(t,e,s){"use strict";s.r(e);var r=s(25),o=Object(r.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"基于promise调用子组件弹窗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于promise调用子组件弹窗"}},[this._v("#")]),this._v(" 基于Promise调用子组件弹窗")]),this._v(" "),t("p",[this._v("在项目里，存在大量需要填写表单数据的弹窗。为了提高代码的复用性与可维护性，我们通常会把这些弹窗封装成子组件。子组件借助自定义事件，将填写好的表单数据传递给父组件。而父组件则需绑定相应事件，用来控制弹窗的打开或关闭，以及处理子组件提交的表单数据。为了简化父组件的多个事件处理函数和emit事件链，我通过ref调用子组件的open事件来打开弹窗，open事件返回一个promise,并在子组件存储了resolve方法，当我们填完数据的时候，再调用resolve方法传递表单数据。这时通过ref调用子组件的open事件就会触发.then方法，接收到子组件传来的表单数据，并在.then方法内书写相应的逻辑。")])])}),[],!1,null,null,null);e.default=o.exports}}]);